#include<bits/stdc++.h>
using namespace std;
//-----------------------------------------------------------------------
void reversearr(int arr[], int n)
{
    int start=0;
    int end=n-1;
    while(start<=end)
    {
        swap(arr[start], arr[end]);
        start++;
        end--;
    }
}

//-----------------------------------------------------------------------
bool isvowel(char &ch)
{
    return (ch=='a'|| ch=='e'||ch=='i'|| ch=='o'|| ch=='u' || ch=='A' || ch=='E' || ch=='I' || ch=='O' ||ch=='U');
}
void reversevowel(string str)
{
    int n=str.size();
    int start=0;
    int end=n-1;
    while(start<=end)
    {
        if(!isvowel(str[start]))
        {
            start++;
        }
        else if(!isvowel(str[end]))
        {
            end--;
        }
        else 
        {
            swap(str[start], arr[end]);
            start++;
            end--;
        }
    }
}

//-----------------------------------------------------------------------
void removeduplicate(int arr[], int n)
{
    unordered_set<int>st;
    for(int i=0; i<n; i++)
    {
        st.insert(arr[i]);
    }
    return st.size();
}

void removeduplicate(int arr[], int n)
{
    int i=0;
    int j=1;
    while(j<n)
    {
        if(arr[i]!=arr[j])
        {
            i++;
            
            arr[i]=arr[j];
        }
        j++;
    }
}

//-----------------------------------------------------------------------
int validtriangle(int arr[], int n)
{
    int ans=0;
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
            for(int k=j+1; k<n; k++)
            {
                if(arr[i]+arr[j]>arr[k] && arr[j]+arr[k]>arr[i] && arr[k]+arr[i]>arr[j])
                {
                    ans++;
                }
            }
        }
    }
    return ans;
}

int validtriangle(int arr[], int n)
{
    sort(arr, arr+n);
    int ans=0;
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
            for(int k=j+1; k<n; k++)
            {
                if(arr[i]+arr[j]>arr[k])
                {
                    ans++;
                }
                else 
                {
                    break;
                }
            }
        }
    }
    return ans;
}

void validtriangleopt(int arr[], int n)
{
    int ans=0;
    sort(arr, arr+n);
    for(int i=n-1; i>=2; i--)
    {
        int start=0;
        int end=i-1;
        
        while(start<end)
        {
            if(arr[start]+arr[end]>arr[i])
            {
                ans+=(end-start);
                end--;
            }
            else 
            {
                start++;
            }
        }
    }
    return ans;
}

//-----------------------------------------------------------------------




//-----------------------------------------------------------------------
int segregate01(int arr[], int n)
{
    sort(arr, arr+n);
}

int segregate01(int arr[], int n)
{
    int count0=0;
    int count1=0;
    for(int i=0; i<n; i++)
    {
        if(arr[i]==0)
        {
            count0++;
        }
        else
        {
            count1--;
        }
    }
    
    for(int i=0; i<count0; i++)
    arr[i]=0;
    
    for(int i=count0; i<n; i++)
    arr[i]=1;
}

int segregate01(int arr[], int n)
{
    int start=0;
    int end=n-1;
    while(start<end)
    {
        if(arr[start]==0)
        {
            start++;
        }
        else 
        {
            if(arr[end]==1)
            {
                end--;
            }
            else 
            {
                swap(arr[start], arr[end]);
                start++;
                end--;
            }
        }
    }
}

//-----------------------------------------------------------------------
int twosum(int arr[], int n, int target)
{
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
            if(arr[i]+arr[j]==target)
            {
                return 1;
            }
        }
    }
    return -1;
}

int binarysearch(int arr[] , int start, int end, int sum)
{
    while(start<end)
    {
        int mid=start+(end-start)/2;
        if(arr[mid]==sum)
        {
            return mid;
        }
        else if(arr[mid]<sum)
        {
            start=mid+1;
        }
        else 
        {
            end=mid-1;
        }
    }
    return -1;
}
int twosum(int arr[], int n, int target)
{
    sort(arr, arr+n);
    for(int i=0; i<n; i++)
    {
        int sum=target-arr[i];
        int index=binarysearch(arr, i+1, n-1, sum);
        if(index!=-1)
        {
            return {i+1, index+1};
        }
    }
    return {};
}

int twosum(int arr[], int n, int target)
{
    int start=0;
    int end=n-1;
    while(start<=end)
    {
        if(arr[start]+arr[end]==target)
        {
            return 1;
        }
        else if(arr[start]+arr[end]<target)
        {
            start++;
        }
        else 
        {
            end--;
        }
    }
    return -1;
}

int twosum(int arr[], int n, int target)
{
    unordered_map<int,int>mp;
    vector<int>ans;
    for(int i=0; i<n; i++)
    {
        if(mp.find(target-arr[i])!=mp.end())
        {
            ans.push_back(target-arr[i]);
            ans.push_back(i);
            return ans;
        }
        
        mp[arr[i]]=i;
    }
    return ans;
}

//-----------------------------------------------------------------------
int paiewithdiff(int arr[], int n, int diff)
{
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
            if(abs(arr[i]-arr[j])==diff)
            {
                return 1;
            }
        }
    }
    return -1;
}

int binarysearch(int arr[], int start, int end, int target)
{
    while(start<=end)
    {
        int mid=start+(end-start)/2;
        if(arr[mid]==target)
        {
            return mid;
        }
        else if(arr[mid]<target)
        {
            start=mid+1;
        }
        else 
        {
            end=mid-1;
        }
    }
    return -1;
}
int paiewithdiff(int arr[], int n, int diff)
{
    sort(arr, arr+n);
    for(int i=0; i<n; i++)
    {
        int target=diff+arr[i];
        int index=binarysearch(arr, i+1, n-1, target);
        if(index!=-1)
        {
            return 1;
        }
    }
    return -1;
}

int paiewithdiff(int arr[], int n, int diff)
{
    sort(arr, arr+n);
    int start=0;
    int end=1;
    
    if(diff<0)
    diff=diff*-1;
    
    while(end<=n)
    {
        if(arr[end]-arr[start]==diff)
        {
            return 1;
        }
        else if(arr[end]-arr[start]<diff)
        {
            end++;
        }
        else 
        {
            start++;
        }
        
        if(start==end)
        end++;
    }
    return 0;
}

//-----------------------------------------------------------------------

int threesum(int arr[], int n, int target)
{
    set<vector<int>>st;
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
            for(int k=j+1; k<n; k++)
            {
                if(arr[i]+arr[j]+arr[k]==target)
                {
                    vector<int>temp;
                    temp.push_back(arr[i]);
                    temp.push_back(arr[j]);
                    temp.push_back(arr[k]);
                    sort(temp.begin(), temp.end());
                    st.insert(temp);
                }
            }
        }
    }
    vector<vector<int>ans(st.begin(), st.end());
    return ans;
}

int threesum(int arr[], int n, int target)
{
    vector<vector<int>>ans;
    sort(arr, arr+n);
    
    for(int i=0; i<n-2; i++)
    {
        if(i>0 && arr[i]==arr[i-1])
        continue;
        
        int start=i+1;
        int end=n-1;
        int sum=target-arr[i];
        
        while(start<end)
        {
            if(arr[start]+arr[end]==sum)
            {
                vector<int>temp;
                temp.push_back(arr[i]);
                temp.push_back(arr[start]);
                temp.push_back(arr[end]);
                ans.push_back(temp);
                start++;
                end--;
                
                while(start<end && arr[start]==arr[start+1]);
                start++;
                
                while(start<end && arr[end]==arr[end-1])
                end--;
            }
            else if(arr[start]+arr[end]<sum)
            {
                start++;
            }
            else 
            {
                end--;
            }
        }
    }
    return ans;
}

//-----------------------------------------------------------------------
int foursum(int arr[], int n, int target)
{
    set<vector<int>>st;
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
            for(int k=j+1; k<n; k++)
            {
                for(int p=k+1; p<n; p++)
                {
                    if(arr[i]+arr[j]+arr[k]+arr[p]==target)
                    {
                        vector<int>temp;
                        temp.push_back(arr[i]);
                        temp.push_back(arr[j]);
                        temp.push_back(arr[k]);
                        temp.push_back(arr[p]);
                        sort(temp.begin(), temp.end());
                        st.insert(temp);
                    }
                }
            }
        }
    }
    vector<vector<int>ans(st.begin(), st.end());
    return ans;
    
}

int foursum(int arr[], int n, int target)
{
    vector<vector<int>>ans;
    sort(arr, arr+n);
    for(int i=0; i>n-3; i++)
    {
        if(i>0 && arr[i]==arr[i-1])
        continue ;
        
        for(int j=i+1; j<n-2; j++)
        {
            if(j>i+1 && arr[j]==arr[j-1])
            continue;
            
            int start=j+1;
            int end=n-1;
            int sum=target-(arr[i]+arr[j]);
            
            while(start<=end)
            {
                if(arr[start]+arr[end]==sum)
                {
                    vector<int>temp;
                    temp.push_back(arr[i]);
                    temp.push_back(arr[j]);
                    temp.push_back(arr[start]);
                    temp.push_back(arr[end]);
                    ans.push_back(temp);
                    start++;
                    end--;
                    
                    while(start<end && arr[start]==arr[start+1])
                    start++;
                    
                    while(start<end && arr[end]==arr[end-1])
                    end--;
                }
                else if(arr[start]+arr[end]<sum)
                {
                    start++;
                }
                else 
                {
                    end--;
                }
            }
        }
    }
    return ans;
}






















